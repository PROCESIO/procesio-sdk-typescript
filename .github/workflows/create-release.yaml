name: Release

on:
  push:
    tags:
      - "v[0-9]+.?[0-9]+.?[0-9]+"

jobs:
  create-release:
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Setup jq
        run: sudo apt-get install jq

      - name: Get Project Name
        id: get-name
        run: |
          project_name=$(cat package.json | jq .name)
          echo "::set-output name=project_name::$project_name"

      - name: Get Version
        id: get-version
        run: |
          version=$(echo "${{ github.ref }}" | awk -F "/" '{print $NF}' | cut -c2-)
          echo "::set-output name=version::$version"

      - name: Set Version
        run: |
          tmp=$(mktemp)
          cat package.json | jq '.version = "${{ steps.get-version.outputs.version }}"' > "$tmp"
          mv "$tmp" package.json

      - uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: "https://npm.pkg.github.com"
          scope: "@procesio"

      - run: npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PROCESIO_BOT_TOKEN }}

      - name: Build
        run: |
          npm run build
          tar czvf dist.tar.gz dist

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.tar.gz
          asset_name: ${{ steps.get-name.outputs.project_name }}-${{ steps.get-version.outputs.version }}.tar.gz
          asset_content_type: application/gzip