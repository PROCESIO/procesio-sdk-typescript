{"version":3,"file":"index.js","mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQA;AAEA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAAA;AA2BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AApBA;AAAA;AAyBA;AACA;AACA;AAHA;;AAxBA;AAsBA;AAtBA;AAAA;;AAAA;AA+BA;AAEA;AAjCA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3BA;AAAA;AAAA;;AAAA;AAAA;AAiEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApGA;AAAA;AAAA;AA0GA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAtJA;AAAA;AAAA;AAwJA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArNA;AAAA;AAAA;AAAA;AAsNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;AALA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAWA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAhCA;AAAA;AAqCA;AACA;AACA;AAHA;;AApCA;AAkCA;AAlCA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtNA;AAAA;AAAA;;AAAA;AAAA;AAoQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApSA;AAAA;AAAA;AAsSA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA9UA;AAAA;AAAA;AAAA;AA+UA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AACA;AACA;;AA7BA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAkCA;;AAlCA;AAAA;AAAA;AAAA;;AAyCA;;AAzCA;AA4CA;AACA;AAEA;AACA;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1DA;;AA2CA;AAAA;AAgBA;;AAEA;AA7DA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+DA;;AA/DA;AAAA;AAAA;AAAA;;AAiEA;;AAjEA;AAAA;AAAA;AAAA;;AAoEA;;AApEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAoEA;AApEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA4FA;AACA;;AA7FA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/UA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;ACVA;AAEA;;;;;;;;;;;;;;;;;;;;;ACmBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAEA;AAEA;AAEA;AAfA;AAAA;AAkBA;AACA;AACA;AAHA;;AAjBA;AAiBA;AAMA;;AAEA;AAEA;;AA3BA;AAAA;;AAAA;AA6BA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAjuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACRA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5BA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACNA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;;AA1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://@procesio/procesio-sdk-typescript/./node_modules/@babel/runtime/regenerator/index.js","webpack://@procesio/procesio-sdk-typescript/./src/lib/ProcesioSDK.ts","webpack://@procesio/procesio-sdk-typescript/./src/lib/index.ts","webpack://@procesio/procesio-sdk-typescript/./src/lib/utils/request.ts","webpack://@procesio/procesio-sdk-typescript/./node_modules/regenerator-runtime/runtime.js","webpack://@procesio/procesio-sdk-typescript/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://@procesio/procesio-sdk-typescript/./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://@procesio/procesio-sdk-typescript/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://@procesio/procesio-sdk-typescript/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://@procesio/procesio-sdk-typescript/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://@procesio/procesio-sdk-typescript/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://@procesio/procesio-sdk-typescript/./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://@procesio/procesio-sdk-typescript/./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://@procesio/procesio-sdk-typescript/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://@procesio/procesio-sdk-typescript/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://@procesio/procesio-sdk-typescript/webpack/bootstrap","webpack://@procesio/procesio-sdk-typescript/webpack/runtime/compat get default export","webpack://@procesio/procesio-sdk-typescript/webpack/runtime/define property getters","webpack://@procesio/procesio-sdk-typescript/webpack/runtime/hasOwnProperty shorthand","webpack://@procesio/procesio-sdk-typescript/webpack/runtime/make namespace object","webpack://@procesio/procesio-sdk-typescript/./src/demo/index.ts"],"sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","import {\n  AuthResponse,\n  FileDefaultValue,\n  FileName,\n  FileWrapper,\n  FlowInstance,\n  GUID,\n} from \"./types\";\nimport { request, RequestMethods } from \"./utils/request\";\n\nexport class ProcesioSDK {\n  private token?: string;\n\n  /**\n   * @description\n   * Authenticates the library with the provided credentials provided in the constructor\n   *\n   * @remarks\n   * You should await for the response of this method before proceeding with other\n   * methods from this library, as them are dependent on the response provided by\n   * the authentication.\n   *\n   * @usageNotes\n   *\n   *  ### Authenticate and log the obtained token\n   *\n   *  ```typescript\n   * const sdkInstance = new ProcesioSDK();\n   *\n   * const token = await sdkInstance.authorize('username', 'password');\n   *\n   * console.log(JSON.stringify(token)); // {\"access_token\":\"<hashed_token>\", \"expires_in\":2592000, \"refresh_expires_in\":2592000, \"refresh_token\":\"<hashed_token>\", \"token_type\":\"bearer\", \"session_state\":\"5beb683c-3ed7-4f7a-be79-c2d3eb5f4e43\", \"scope\":\"email profile\", \"error\":null, \"error_description\":null}\n   *\n   * ```\n   * @returns A Promise which returns an object containing all the necessary informations for\n   * authentication, like token or refresh token.\n   */\n  async authorize(username: string, password: string) {\n    const credentials = {\n      username,\n      password,\n      realm: \"procesio01\",\n      client_id: \"procesio-ui\",\n    };\n\n    const form: string[] = [];\n\n    for (const property in credentials) {\n      const encodedKey = encodeURIComponent(property);\n      const encodedValue = encodeURIComponent(credentials[property]);\n      form.push(encodedKey + \"=\" + encodedValue);\n    }\n\n    const formJoin = form.join(\"&\");\n\n    const headers = new Headers();\n\n    headers.set(\"Content-type\", \"application/x-www-form-urlencoded\");\n\n    const resp = await fetch(\n      \"https://api.procesio.app:4532/api/authentication\",\n      {\n        method: \"POST\",\n        body: formJoin,\n        headers,\n      }\n    );\n\n    const authResponse: AuthResponse = await resp.json();\n\n    this.token = authResponse.access_token;\n\n    return authResponse;\n  }\n\n  /**\n   * @description\n   * Calls an endpoint through which you can publish a process with the required\n   * inputs in order to run that process.\n   *\n   * @remarks\n   * Running a process from the PROCESIO platform is done in 3 different steps.\n   * `PUBLISH` (generates an instance of a process), `uploadFile` (required ony for instances\n   * that have file inputs) and `launch` (executes the previously generated instance)\n   *\n   * @usageNotes\n   *\n   *  ### Publish a process which sends an email and log the instance id.\n   *\n   *  ```typescript\n   * const sdkInstance = new ProcesioSDK();\n   *\n   * await sdkInstance.authorize('username', 'password');\n   *\n   * const publishReq = await sdkInstance.publish('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx', {to: \"someemail@domain.com\", subject: \"Process launched via SDK\"})\n   *\n   * console.log(publishReq.content.flows.id); // \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx\"\n   *\n   * ```\n   * @param processId - The id of the process. Can be obtained from the PROCESIO platform.\n   *\n   * @param payload\n   * Object which contains all the inputs needed to run a process from the PROCESIO platform.\n   * The key of map is the variable name set in the process from the PROCESIO platform.\n   * The value of the map is the value of said variable. If a variable is of type file, it's\n   * value should be an object with the key name and the value the name of the file\n   *\n   * @param workspace - The workspace associated with the process. Optional.\n   *\n   * @returns A Promise which returns the instance of the process.\n   */\n  publish(\n    processId: GUID,\n    payload: Record<string, unknown | FileName | FileName[]>,\n    workspace?: string\n  ) {\n    if (!this.token) {\n      throw Error(\"Authorization information missing.\");\n    }\n\n    return request<Record<\"flows\", FlowInstance>>({\n      url: `Projects/${processId}/instances/publish`,\n      bearerToken: this.token,\n      workspace,\n      body: payload,\n      method: RequestMethods.POST,\n    });\n  }\n\n  /**\n   * @description\n   * Calls an endpoint through which you can launch an instance of a process.\n   *\n   * @remarks\n   * Running a process from the PROCESIO platform is done in 3 different steps.\n   * `publish` (generates an instance of a process), `uploadFile` (required ony for instances\n   * that have file inputs) and `LAUNCH` (executes the previously generated instance)\n   *\n   * @usageNotes\n   *\n   *  ### Launch an instance of a process which sends an email and log the instance id.\n   *\n   *  ```typescript\n   * const sdkInstance = new ProcesioSDK();\n   *\n   * await sdkInstance.authorize('username', 'password');\n   *\n   * const publishReq = await sdkInstance.publish('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx', {to: \"someemail@domain.com\", subject: \"Process launched via SDK\"})\n   *\n   * if (!publishReq.isError && publishReq.content.flows.isValid) {\n   *   const launchReq = await sdkInstance.launch(publish.content.flows.id);\n   *\n   *   console.log(launchReq.content?.instanceId); // \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx\"\n   *}\n   * ```\n   * @param instanceId - The id of the instance. Can be obtained by `publish`ing a process.\n   *\n   * @param workspace - The workspace associated with the instance. Optional.\n   *\n   * @returns A Promise which returns an object with they key instanceId.\n   */\n  launch(instanceId: GUID, workspace?: string) {\n    if (!this.token) {\n      throw Error(\"Authorization information missing.\");\n    }\n\n    return request<{ instanceId: GUID }>({\n      url: `Projects/instances/${instanceId}/launch`,\n      bearerToken: this.token,\n      workspace,\n      body: { connectionId: \"\" },\n    });\n  }\n\n  /**\n   * @description\n   * Calls an endpoint through which you can upload a file associated to an input.\n   *\n   * @remarks\n   * Running a process from the PROCESIO platform is done in 3 different steps.\n   * `publish` (generates an instance of a process), `UPLOADFILE` (required ony for instances\n   * that have file inputs) and `launch` (executes the previously generated instance)\n   *\n   * @usageNotes\n   *\n   *  ### Execute a process which sends an email with attachments and log the instance id.\n   *\n   *  ```typescript\n   * const sdkInstance = new ProcesioSDK();\n   *\n   * await sdkInstance.authorize('username', 'password');\n   *\n   * document\n   *   .getElementById(\"file\")\n   *   .addEventListener(\"change\", handleFileSelect, false);\n   *\n   * function handleFileSelect(evt) {\n   *   const files = evt.target.files; // FileList object\n   *   const file = files[0];\n   * \n   *   const publishReq = await sdkInstance.publish('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx', {to: \"someemail@domain.com\", subject: \"Process launched via SDK\", attachments: {name: file.name}})\n   *\n   *   if (!publishReq.isError && publishReq.content.flows.isValid) {\n   *     const fileVariable = publishReq.content.flows.variables.find((variable) => variable.name === \"invoiceListFile\");\n   * \n   *     await sdkInstance.uploadFile(publishReq.content.flows.id, fileVariable.name, fileVariable.defaultValue.id, file)\n   * \n   *     const launchReq = await sdkInstance.launch(publishReq.content.flows.id);\n   *\n   *     console.log(launchReq.content?.instanceId); // \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx\"\n   *   }\n   * }\n   *\n   \n   * ```\n   * @param instanceId - The id of the instance. Can be obtained by `publish`ing a process.\n   * @param variableName - The name of the input variable. \n   * @param fileId - The id of the file. Can be obtained on the `publish` response in the in the `variable` property.\n   * @param file\n   *\n   * @param workspace - The workspace associated with the instance. Optional.\n   *\n   * @returns A Response Promise which returns the id of the file.\n   */\n  async uploadFile(\n    instanceId: GUID,\n    variableName: string,\n    fileId: GUID,\n    file: File,\n    workspace = \"\"\n  ) {\n    if (!this.token) {\n      throw Error(\"Authorization information missing.\");\n    }\n\n    const headers = new Headers();\n\n    headers.set(\"Accept\", \"application/json\");\n\n    headers.set(\"Authorization\", `Bearer ${this.token}`);\n\n    headers.set(\"realm\", \"procesio01\");\n\n    headers.set(\"flowInstanceId\", instanceId);\n\n    headers.set(\"variableName\", variableName);\n\n    headers.set(\"fileId\", fileId);\n\n    headers.set(\"workspace\", workspace);\n\n    const formData = new FormData();\n\n    formData.append(\"package\", file);\n\n    headers.delete(\"Content-Type\");\n    delete headers[\"Content-Type\"];\n\n    const resp = await fetch(\n      `https://api.procesio.app:4321/api/file/upload/flow`,\n      {\n        method: \"POST\",\n        headers,\n        body: formData,\n      }\n    );\n\n    return resp.json();\n  }\n\n  /**\n   * @description\n   * Calls an endpoint through which you can run a process with the required inputs.\n   *\n   * @remarks\n   * The called endpoint only work for processes than don't have file inputs.\n   * The called endpoint uses the endpoints called in `publish` and `launch`.\n   *\n   * @usageNotes\n   *\n   *  ### Runs a process which sends an email and log the instance id.\n   *\n   *  ```typescript\n   * const sdkInstance = new ProcesioSDK();\n   *\n   * await sdkInstance.authorize('username', 'password');\n   *\n   * const runReq = await sdkInstance.run('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx', {to: \"someemail@domain.com\", subject: \"Process launched via SDK\"})\n   *\n   * console.log(runReq.content?.instanceId?.id); // \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx\"\n   *\n   * ```\n   * @param processId - The id of the process. Can be obtained from the PROCESIO platform.\n   *\n   * @param payload\n   * Object which contains all the inputs needed to run a process from the PROCESIO platform.\n   * The key of map is the variable name set in the process from the PROCESIO platform.\n   * The value of the map is the value of said input variable.\n   *\n   * @param workspace - The workspace associated with the process. Optional.\n   *\n   * @returns A Promise which returns an object with they key instanceId.\n   */\n  run(processId: GUID, payload: Record<string, unknown>, workspace?: string) {\n    if (!this.token) {\n      throw Error(\"Authorization information missing.\");\n    }\n\n    return request<{ instanceId: GUID }>({\n      url: `Projects/${processId}/run`,\n      bearerToken: this.token,\n      workspace,\n      body: { payload },\n    });\n  }\n\n  /**\n   * @description\n   * Run a process with the required inputs.\n   *\n   * @usageNotes\n   *\n   *  ### Runs a process which sends an email and log the instance id.\n   *\n   *  ```typescript\n   * const sdkInstance = new ProcesioSDK();\n   *\n   * await sdkInstance.authorize('username', 'password');\n   *\n   * const runReq = await sdkInstance.run('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx', {to: \"someemail@domain.com\", subject: \"Process launched via SDK\"})\n   *\n   * console.log(runReq.content?.instanceId?.id); // \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx\"\n   *\n   * ```\n   * @param processId - The id of the process. Can be obtained from the PROCESIO platform.\n   *\n   * @param payload\n   * Object which contains all the inputs needed to run a process from the PROCESIO platform.\n   * The key of map is the variable name set in the process from the PROCESIO platform.\n   * The value of the map is the value of said input variable.\n   *\n   * @param workspace - The workspace associated with the process. Optional.\n   *\n   * @returns A Promise which returns an object with they key instanceId.\n   */\n  async runProcess(\n    processId: GUID,\n    payload: Record<string, unknown | File | FileList>,\n    workspace?: string\n  ) {\n    let hasFiles = false;\n\n    const files: Record<string, FileWrapper | FileWrapper[]> = {};\n\n    const parsedPayload = Object.entries(payload).reduce(\n      (acc: Record<string, unknown | FileName | FileName[]>, [key, value]) => {\n        if (value instanceof File) {\n          hasFiles = true;\n\n          acc[key] = { name: value.name };\n\n          files[key] = { package: value };\n        } else if (value instanceof FileList) {\n          hasFiles = true;\n\n          const fileArray = Array.from(value);\n\n          acc[key] = fileArray.map((file) => ({ name: file.name }));\n\n          files[key] = fileArray.map((file) => ({ package: file }));\n        } else {\n          acc[key] = value;\n        }\n        return acc;\n      },\n      {}\n    );\n\n    if (hasFiles) {\n      const publishReq = await this.publish(\n        processId,\n        parsedPayload,\n        workspace\n      );\n\n      if (!publishReq.isError && publishReq.content.flows.isValid) {\n        const instance = publishReq.content.flows;\n\n        for (const variableName in files) {\n          if (Object.prototype.hasOwnProperty.call(files, variableName)) {\n            const fileWrapper = files[variableName];\n\n            const defaultValue = instance.variables.find(\n              (variable) => variable.name === variableName\n            ).defaultValue;\n\n            if (Array.isArray(fileWrapper)) {\n              fileWrapper.forEach((wrapper, index) => {\n                wrapper.fileId = (defaultValue as FileDefaultValue[])[index].id;\n              });\n            } else {\n              fileWrapper.fileId = (defaultValue as FileDefaultValue).id;\n            }\n          }\n        }\n\n        const promises: Array<Response> = [];\n\n        for (const variableName in files) {\n          if (Object.prototype.hasOwnProperty.call(files, variableName)) {\n            const element = files[variableName];\n\n            if (Array.isArray(element)) {\n              for (let index = 0; index < element.length; index++) {\n                promises.push(\n                  await this.uploadFile(\n                    instance.id,\n                    variableName,\n                    element[index].fileId,\n                    element[index].package\n                  )\n                );\n              }\n            } else {\n              promises.push(\n                await this.uploadFile(\n                  instance.id,\n                  variableName,\n                  element.fileId,\n                  element.package\n                )\n              );\n            }\n          }\n        }\n\n        return Promise.all(promises).then(() => {\n          return this.launch(instance.id, workspace);\n        });\n      }\n    } else {\n      return this.run(processId, payload, workspace);\n    }\n  }\n}\n","import { ProcesioSDK } from \"./ProcesioSDK\";\n\nexport default ProcesioSDK;\n","export interface RequestParams {\n  url: string;\n  bearerToken: string;\n  workspace: string;\n  body?: unknown;\n  method?: RequestMethods;\n}\n\nexport interface RestResponse<T> {\n  status: number;\n  isError: boolean;\n  errorContent?: ErrorContent[];\n  content?: T;\n}\n\nexport interface ErrorContent {\n  statusCode: number;\n  target: string;\n  value: string;\n}\n\nexport enum RequestMethods {\n  GET = \"GET\",\n  POST = \"POST\",\n  DELETE = \"DELETE\",\n  PUT = \"PUT\",\n}\n\nexport async function request<T>({\n  bearerToken,\n  url,\n  method = RequestMethods.POST,\n  workspace = \"\",\n  body,\n}: RequestParams) {\n  const headers = new Headers();\n\n  headers.set(\"Content-type\", \"application/json\");\n\n  headers.set(\"Authorization\", `Bearer ${bearerToken}`);\n\n  headers.set(\"realm\", \"procesio01\");\n\n  headers.set(\"workspace\", workspace);\n\n  const req = await fetch(`https://api.procesio.app:4321/api/${url}`, {\n    method,\n    headers,\n    body: JSON.stringify(body),\n  });\n\n  const status = req.status;\n\n  if (req.status === 401) {\n    // refresh token\n  }\n\n  const resp = await req.json();\n\n  const isBadRequest = status !== 200;\n\n  const response: RestResponse<T> = {\n    status,\n    isError: isBadRequest,\n    errorContent: isBadRequest ? resp : null,\n    content: isBadRequest ? null : resp,\n  };\n  return response;\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import ProcesioSDK from \"../lib\";\r\n\r\nconst myLibraryInstance = new ProcesioSDK();\r\n\r\nconsole.log(\"myLibraryInstance\", myLibraryInstance);\r\n\r\nconst input = document.createElement(\"input\");\r\n\r\ninput.type = \"file\";\r\ninput.multiple = true;\r\n\r\nconst btn = document.createElement(\"button\");\r\nbtn.innerText = \"Trigger flow\";\r\n\r\nconst body = document.querySelector(\"body\");\r\n\r\nbody.innerHTML = `<h1>Hello World!</h1>`;\r\nbody.appendChild(input);\r\nbody.appendChild(btn);\r\n\r\nlet fileList: FileList;\r\nlet singleFile: File;\r\n\r\ninput.onchange = function (e) {\r\n  const files = (<HTMLInputElement>e.target).files;\r\n\r\n  fileList = files;\r\n  singleFile = fileList[0];\r\n};\r\n\r\nbtn.onclick = async function () {\r\n  await myLibraryInstance.authorize(\"cuore.nica@procesio.com\", \"C#ut1creier\");\r\n  // const run = await myLibraryInstance.run(\r\n  //   \"241c2beb-4788-4c07-a705-0cec62ac1086\",\r\n  //   {\r\n  //     from: \"External application\",\r\n  //     to: \"cuore.nica@procesio.com\",\r\n  //     subject: \"Email triggered by external application\",\r\n  //     body: \"Some randon body\",\r\n  //   }\r\n  // );\r\n  // console.log(run.content);\r\n  //   return;\r\n  // const publish = await myLibraryInstance.publish(\r\n  //   \"241c2beb-4788-4c07-a705-0cec62ac1086\",\r\n  //   {\r\n  //     from: \"External application\",\r\n  //     to: \"cuore.nica@procesio.com\",\r\n  //     subject: \"Email triggered by external application\",\r\n  //     body: \"Some randon body\",\r\n  //     // singleFile: singleFile,\r\n  //     // fileList: fileList,\r\n  //   }\r\n  // );\r\n\r\n  // console.log(publish.content.flows.id);\r\n  // if (!publish.isError && publish.content.flows.isValid) {\r\n  //   const launch = await myLibraryInstance.launch(publish.content.flows.id);\r\n  //   console.log(launch.content.instanceId);\r\n  // }\r\n\r\n  // myLibraryInstance.u\r\n\r\n  myLibraryInstance\r\n    .executeProcess(\"241c2beb-4788-4c07-a705-0cec62ac1086\", {\r\n      from: \"External application\",\r\n      to: \"cuore.nica@procesio.com\",\r\n      subject: \"Email triggered by external application\",\r\n      body: \"Some randon body\",\r\n      singleFile: singleFile,\r\n      fileList: fileList,\r\n    })\r\n    .then((resp) => console.log(resp.content));\r\n};\r\n"],"names":[],"sourceRoot":""}